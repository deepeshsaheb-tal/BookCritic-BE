name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bookcritic_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.19.0'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    # - name: Run linting
    #   run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: bookcritic_test
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
    
    - name: Generate test coverage report
      run: npm run test:cov
  
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.19.0'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: |
          dist
          package.json
          package-lock.json
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Get EC2 public IP
      id: get-ip
      run: |
        EC2_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=bookcritic-backend" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
        echo "EC2_IP=$EC2_IP" >> $GITHUB_OUTPUT
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.get-ip.outputs.EC2_IP }} >> ~/.ssh/known_hosts
    
    - name: Debug EC2 environment
      run: |
        ssh ubuntu@${{ steps.get-ip.outputs.EC2_IP }} "echo 'Debugging Node environment' && \
        echo 'Current PATH:' && echo $PATH && \
        echo 'Node location:' && which node || echo 'node not found' && \
        echo 'NPM location:' && which npm || echo 'npm not found' && \
        echo 'PM2 location:' && which pm2 || echo 'pm2 not found' && \
        echo 'NVM directory:' && ls -la ~/.nvm || echo 'nvm not found' && \
        echo 'Node versions:' && ls -la ~/.nvm/versions/node/ || echo 'no node versions found'"

    - name: Create .env file
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT || '5432' }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_SCHEMA: ${{ secrets.DB_SCHEMA || 'public' }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '1d' }}
        JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN || '7d' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Debug: Check if secrets are available (will show as *** in logs)
        echo "Checking if secrets are available:"
        echo "DB_HOST: $DB_HOST"
        echo "DB_PORT: $DB_PORT"
        echo "DB_USERNAME: $DB_USERNAME"
        echo "DB_PASSWORD: ***"
        echo "DB_DATABASE: $DB_DATABASE"
        echo "DB_SCHEMA: $DB_SCHEMA"
        echo "JWT_SECRET: ***"
        echo "JWT_REFRESH_SECRET: ***"
        echo "OPENAI_API_KEY: ***"
        
        # Create .env file with proper quoting to handle special characters
        cat > .env << 'EOF'
        # Database Configuration
        DB_HOST="${DB_HOST}"
        DB_PORT="${DB_PORT}"
        DB_USERNAME="${DB_USERNAME}"
        DB_PASSWORD="${DB_PASSWORD}"
        DB_DATABASE="${DB_DATABASE}"
        DB_SCHEMA="${DB_SCHEMA}"
        
        # Application Configuration
        PORT=3000
        NODE_ENV=production
        API_PREFIX=api/v1
        
        # JWT Configuration
        JWT_SECRET="${JWT_SECRET}"
        JWT_EXPIRES_IN="${JWT_EXPIRES_IN}"
        JWT_REFRESH_SECRET="${JWT_REFRESH_SECRET}"
        JWT_REFRESH_EXPIRES_IN="${JWT_REFRESH_EXPIRES_IN}"
        
        # OpenAI Configuration
        OPENAI_API_KEY="${OPENAI_API_KEY}"
        EOF
        
        # Show .env file content (with sensitive data masked)
        echo "Generated .env file (sensitive data masked):"
        cat .env | sed 's/\(DB_PASSWORD=\).*/\1***/' | sed 's/\(JWT_SECRET=\).*/\1***/' | sed 's/\(JWT_REFRESH_SECRET=\).*/\1***/' | sed 's/\(OPENAI_API_KEY=\).*/\1***/'

    - name: Create deployment script
      run: |
        echo '#!/bin/bash' > deploy.sh
        echo 'cd /home/ubuntu/bookcritic-backend' >> deploy.sh
        echo 'source ~/.bashrc' >> deploy.sh
        echo 'source ~/.profile' >> deploy.sh
        echo 'export NVM_DIR="$HOME/.nvm"' >> deploy.sh
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Install dependencies' >> deploy.sh
        echo 'npm ci --production' >> deploy.sh
        echo '' >> deploy.sh
        echo '# Start or restart the application' >> deploy.sh
        echo 'if pm2 list | grep -q bookcritic; then' >> deploy.sh
        echo '  pm2 restart bookcritic' >> deploy.sh
        echo 'else' >> deploy.sh
        echo '  pm2 start dist/src/main.js --name bookcritic' >> deploy.sh
        echo 'fi' >> deploy.sh
        
        chmod +x deploy.sh

    - name: Deploy to EC2
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT || '5432' }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_SCHEMA: ${{ secrets.DB_SCHEMA || 'public' }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '1d' }}
        JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN || '7d' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Transfer application files
        rsync -avz --delete dist/ ubuntu@${{ steps.get-ip.outputs.EC2_IP }}:/home/ubuntu/bookcritic-backend/dist/
        rsync -avz package*.json ubuntu@${{ steps.get-ip.outputs.EC2_IP }}:/home/ubuntu/bookcritic-backend/
        
        # Transfer .env file
        rsync -avz .env ubuntu@${{ steps.get-ip.outputs.EC2_IP }}:/home/ubuntu/bookcritic-backend/
        
        # Transfer and execute deployment script
        rsync -avz deploy.sh ubuntu@${{ steps.get-ip.outputs.EC2_IP }}:/home/ubuntu/
        ssh ubuntu@${{ steps.get-ip.outputs.EC2_IP }} "bash /home/ubuntu/deploy.sh"
